//file:noinspection GroovyUnusedAssignment
plugins {
    id 'org.springframework.boot' version '3.0.1'
    id 'java'
    id 'com.google.cloud.tools.jib' version '3.3.1'
}

apply plugin: 'io.spring.dependency-management'


group = 'ch.akop'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 17
targetCompatibility = 17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://maven.pkg.github.com/AndreKoepke/weathercloud"
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("REPO_USERNAME")
            password = project.findProperty("gpr.pass") ?: System.getenv("REPO_TOKEN")

        }
    }
}

dependencies {
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'org.flywaydb:flyway-core:9.11.0'

    // misc
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'com.github.pengrad:java-telegram-bot-api:6.3.0'
    implementation 'ch.akop:weathercloud:0.1.1'
    implementation 'net.e175.klaus:solarpositioning:0.1.6'

    // rxJava
    implementation 'io.reactivex.rxjava3:rxjava:3.1.6'
    implementation 'com.jakewharton.rx3:replaying-share:3.0.0'
}

test {
    useJUnitPlatform()
}

jib {

    extraDirectories {
        paths {
            path {
                from = file('executables')
                into = '/bin'
            }
        }
        permissions = [
                '/bin/*': '755'
        ]
    }

    from {
        image = 'openjdk:17'
    }

    to {
        image = 'akop/home-system:latest'
        auth {
            username = project.findProperty("docker.user") ?: System.getenv("DOCKER_USER") ?: ""
            password = project.findProperty("docker.pass") ?: System.getenv("DOCKER_PASS") ?: ""
        }
    }
}

task ensureDepsExist() {
    doLast {
        configurations.implementation.canBeResolved(true)
        Set<File> impFiles = configurations.implementation.resolve()

        impFiles.forEach { f ->
            if (!f.exists()) {
                ant.fail "${f} could not be found"
            }
        }
    }
}

compileJava.dependsOn ensureDepsExist
