plugins {
    id 'org.springframework.boot' version '2.6.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'com.google.cloud.tools.jib' version '3.1.4'
}

group = 'ch.akop'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://maven.pkg.github.com/AndreKoepke/weathercloud"
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.pass") ?: System.getenv("TOKEN")

        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.java-websocket:Java-WebSocket:1.5.2'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'com.github.pengrad:java-telegram-bot-api:5.7.0'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'io.reactivex.rxjava3:rxjava:3.1.3'

    implementation 'ch.akop:weathercloud:0.0.4'
}

test {
    useJUnitPlatform()
}


jib {

    from {
        image = 'openjdk:17'
    }

    to {
        image = 'akop/home-system'
    }
}

task ensureDepsExist() {
    doLast {
        configurations.implementation.canBeResolved(true)
        Set<File> impFiles = configurations.implementation.resolve()

        impFiles.forEach { f ->
            if (!f.exists()) {
                ant.fail "${f} could not be found"
            }
        }
    }
}

compileJava.dependsOn ensureDepsExist
